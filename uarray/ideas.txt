What is uarray?

Uarray is a unified or universal array interface. Different objects can be a uarray by defining certain methods that implement the core concepts of an array.

A uarray is an object that has the __uarray__ attribute which returns an object that implements the uarray interface. 

The uarray package itself also provides a mechanism to wrap objects so that functions on those objects produce an abstract tree that can be reduced (i.e. by pattern matching) and then executed on a "backend" that implements the uarray interface and a set of registered QFunctions.

We can build a uarray mixin class that provides additional methods based on operations that must be implemented.

__uarray__: returns an object implementing the uarray interface for this object

uarray interface:
   required
      __uarray_psi__ : function mapping from a sequence of integers to another __uarray__ object
      __uarray_psi_dim__: function mapping from a sequence of a sequence of integers to a __uarray__ one dimension smaller
      __uarray_shape__: a named tuple showing the shape of the uarray (or None if unknown) 
      __uarray_getitem__ : a function that returns an object of type mtype
      __uarray_setitem__ : a function that sets an element of the array with an object of type mtype 
      __uarray_mtype__ : return the Python type object in each element of the array
      __uarray_concat__ : concatenate a sequence of __uarray__ objects along an axis

    optional
      __uarray_llvm__ : return named tuple of llvm snippets
      __uarray_llfuncs__ : return named tuple of low-level function pointers 


Other functions to think about:
    * __uarray_slice__
    * __uarary_mask__
    * __uarray_zipget__
    * ...

Attributes to think about:

    * size -- returns the total length of the uarray
    * ndim -- number of dimensions 
    * readonly 

What is a QFunction?

A Qfunction is an abstract concept for a multiple-dispatch function that accepts uarray objects: 
  * It allows registration of specific implementations for the exact instance of the object
  * It may provide simplification rules involving the QFunction in terms of other QFunctions which can be applied at call time.
  * If no exact registration is provided, then it uses the uarray interface to produce a result from the inputs.  If the outputs are given (as keyword arguments) as types, then it constructs the arrays of that type.  If the outputs are given as an object, then it inserts the value in those types. If no outputs are given, then it creates them using type-inference rules (eventually).

